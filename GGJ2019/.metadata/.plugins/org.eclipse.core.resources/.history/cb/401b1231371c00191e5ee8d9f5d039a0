package com.mygdx.game;

import java.util.Iterator;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;

public class MyGdxGame extends ApplicationAdapter {
	private OrthographicCamera camera;
	SpriteBatch batch;
	Texture img;
	Texture img2;
	private Rectangle monkey;
    Vector3 touchPos = new Vector3();
    private Array<Rectangle> raindrops;
    private long lastDropTime;
	
	@Override
	public void create () {
		batch = new SpriteBatch();
		img = new Texture("Singe Astronaute.png");
		img2 = new Texture("Singe Astronaute Roland.png");
		camera = new OrthographicCamera();
		camera.setToOrtho(false, 800, 480);
		monkey = new Rectangle();
		monkey.x = 800 / 2 - 64 / 2;
		monkey.y = 20;
		monkey.width = 64;
		monkey.height = 64;
		raindrops = new Array<Rectangle>();
		spawnRaindrop();
	}

	@Override
	public void render () {
		Gdx.gl.glClearColor(0, 0, 0.2f, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		camera.update();
		batch.setProjectionMatrix(camera.combined);
		batch.begin();
		batch.draw(img, monkey.x, monkey.y);
		for(Rectangle raindrop: raindrops) {
		      batch.draw(img2, raindrop.x, raindrop.y);
		   }
		batch.end();
		if(Gdx.input.isTouched()) {
		      touchPos.set(Gdx.input.getX(), Gdx.input.getY(), 0);
		      camera.unproject(touchPos);
		      monkey.x = touchPos.x - monkey.width / 2;
		   }
		if(Gdx.input.isKeyPressed(Input.Keys.LEFT))
			monkey.x -= 200 * Gdx.graphics.getDeltaTime();
		if(Gdx.input.isKeyPressed(Input.Keys.RIGHT))
			monkey.x += 200 * Gdx.graphics.getDeltaTime();
		if(monkey.x < 0) 
			monkey.x = 0;
		if(monkey.x > 800 - monkey.width*2) 
			monkey.x = 800 - monkey.width*2;
		if(TimeUtils.nanoTime() - lastDropTime > 1000000000) 
			spawnRaindrop();
		for (Iterator<Rectangle> iter = raindrops.iterator(); iter.hasNext(); ) {
		      Rectangle raindrop = iter.next();
		      raindrop.y -= 200 * Gdx.graphics.getDeltaTime();
		      if(raindrop.y + 64 < 0) iter.remove();
		      if(raindrop.overlaps(monkey)) {
			         iter.remove();
			      }
		   }
		
	}
	
	@Override
	public void dispose () {
		batch.dispose();
		img.dispose();
	}
	
	//c'est le tuto pour test des trucs
	private void spawnRaindrop() {
	      Rectangle raindrop = new Rectangle();
	      raindrop.x = MathUtils.random(0, 800-64);
	      raindrop.y = 480;
	      raindrop.width = 64;
	      raindrop.height = 64;
	      raindrops.add(raindrop);
	      lastDropTime = TimeUtils.nanoTime();
	   }
}
